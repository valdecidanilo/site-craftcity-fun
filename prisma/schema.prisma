model Cart {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @unique
  items     CartItem[]
  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())
}

model CartItem {
  id        String    @id @default(cuid())
  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  quantity  Int       @default(1)
  price     Float     // preço do momento da adição
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?

  nickname       String?   @unique
  cpf            String?
  birthday       DateTime?
  senha          String?
  provider       String?
  isAdmin        Boolean   @default(false)

  accounts       Account[]
  sessions       Session[]
  cart           Cart?
  orders         Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id             String         @id @default(cuid())
  name           String
  slug           String         @unique
  isActive       Boolean        @default(true)
  order          Int            @default(0)
  products       Product[]
  subcategories  Subcategory[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Subcategory {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  isActive    Boolean   @default(true)
  order       Int       @default(0)
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id               String        @id @default(cuid())
  name             String
  price            Float
  discountPrice    Float?
  description      String
  categoryId       String
  category         Category      @relation(fields: [categoryId], references: [id])
  subcategoryId    String?
  subcategory      Subcategory?  @relation(fields: [subcategoryId], references: [id])
  image            String?
  minecraftCommand String?       // Comando Minecraft a ser enviado na compra
  isExpirable      Boolean       @default(false) // Se é um passe com expiração
  expireDays       Int?          // Quantos dias dura o passe
  expireCommand    String?       // Comando a ser executado ao expirar
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  cartItems        CartItem[]
  orderItems       OrderItem[]
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  status     String      // ex: 'pending', 'paid', 'failed', 'delivered'
  items      OrderItem[]
}

model OrderItem {
  id              String     @id @default(cuid())
  orderId         String
  order           Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product    @relation(fields: [productId], references: [id])
  quantity        Int        @default(1)
  price           Float      // preço no momento da compra
  commandSent     Boolean    @default(false)
  commandSentAt   DateTime?
  commandResponse String?
  expiresAt       DateTime?  // Data de expiração do passe, se aplicável
  expireCommandSent Boolean  @default(false) // Se o comando de expiração já foi enviado
  expireCommandSentAt DateTime?
  expireCommandResponse String?
}
